Parameters:
  EnvironmentName:
    Description: The name of the environment, to be appended to resourcesl
    Type: String
  VPCCIDR:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: 10.0.0.0/16
    Description: VPC CIDR Block (eg 10.0.0.0/16)
    Type: String
  PrivateSubnet1CIDR:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: 10.0.3.0/24
    Description: Private Subnet 1 CIDR Block (eg 10.0.3.0/24)
    Type: String  
  PrivateSubnet2CIDR:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: 10.0.4.0/24
    Description: Private Subnet 2 CIDR Block (eg 10.0.4.0/24)
    Type: String  
  PublicSubnet1CIDR:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: 10.0.1.0/24
    Description: Public Subnet 1 CIDR Block (eg 10.0.1.0/24)
    Type: String  
  PublicSubnet2CIDR:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: 10.0.2.0/24
    Description: Public Subnet 2 CIDR Block (eg 10.0.2.0/24)
    Type: String  
Resources:
# Network Assets first
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 
        Ref: VPCCIDR
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName
  InternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName
  InternetGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
  PublicSubnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs '']
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ1)
      VpcId: !Ref VPC
  PublicSubnet2:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select [ 1, !GetAZs '']
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ2)
      VpcId: !Ref VPC
  PrivateSubnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs '']
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ1)
      VpcId: !Ref VPC
  PrivateSubnet2:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select [ 1, !GetAZs '']
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ1)
      VpcId: !Ref VPC            
  NatGateway1IP:
    Type: "AWS::EC2::EIP"
    DependsOn:
      - InternetGatewayAttachment
    Properties:
      Domain: vpc  
  NatGateway2IP:
    Type: "AWS::EC2::EIP"
    DependsOn:
      - InternetGatewayAttachment
    Properties:
      Domain: vpc  
  NatGateway1:
    Type: "AWS::EC2::NatGateway"
    Properties:
      AllocationId: !GetAtt NatGateway1IP.AllocationId
      SubnetId: !Ref PublicSubnet1
  NatGateway2:
    Type: "AWS::EC2::NatGateway"
    Properties:
      AllocationId: !GetAtt NatGateway2IP.AllocationId
      SubnetId: !Ref PublicSubnet1  
  PublicRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Routes
      VpcId: !Ref VPC
  DefaultPublicRoute:
    Type: "AWS::EC2::Route"
    DependsOn:
      - InternetGatewayAttachment
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable
  PublicSubnet1RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1
  PublicSubnet2RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2
  PrivateRouteTable1:
    Type: "AWS::EC2::RouteTable"
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Routes
      VpcId: !Ref VPC
  DefaultPrivateRoute1:
    Type: "AWS::EC2::Route"
    DependsOn:
      - InternetGatewayAttachment
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1
      RouteTableId: !Ref PrivateRouteTable1       
  PrivateRouteTable2:
    Type: "AWS::EC2::RouteTable"
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Routes
      VpcId: !Ref VPC
  DefaultPrivateRoute2:
    Type: "AWS::EC2::Route"
    DependsOn:
      - InternetGatewayAttachment
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2
      RouteTableId: !Ref PrivateRouteTable2
  PrivateSubnet1RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1
  PrivateSubnet2RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2
  # Server Assets Next
  LoadBalancerSecurity:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Control access to our load balancer
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0          
      VpcId: !Ref VPC
  WebServerSecurity:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Control access to our web servers
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 
            Ref: VPCCIDR
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 
            Ref: VPCCIDR
      VpcId: !Ref VPC
  WebServerLaunchConfig:
    Type: "AWS::AutoScaling::LaunchConfiguration"
    Properties:
      AssociatePublicIpAddress: false
      BlockDeviceMappings:
        - DeviceName: "/dev/sdk"
          Ebs:
            VolumeSize: 10
      ImageId: ami-07c1207a9d40bc3bd
      InstanceType: t3.medium
      SecurityGroups:
        - !Ref WebServerSecurity
      UserData: 
        Fn::Base64:
          Fn::Join: ["",
            ["#!/bin/bash\n",
            "apt-get update\n",
            "apt-get install -y unzip\n",
            "apt-get install -y apt-transport-https ca-certificates curl software-properties-common\n",
            "curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\n",
            "add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\"\n",
            "apt-get update\n",
            "apt-get install -y docker-ce\n",
            "usermod -aG docker ubuntu\n",
            "wget https://devops-udagram-zip.s3.us-east-2.amazonaws.com/udagram.zip\n",
            "unzip udagram.zip\n",
            "cd udagram\n",
            "docker run --name udagram -p 80:80 -v \"$(pwd)\":/usr/local/apache2/htdocs/ httpd \n"
            ]
      ]
  WebServerGroup:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties:
      LaunchConfigurationName: 
        Ref: WebServerLaunchConfig
      MaxSize: '5'
      MinSize: '3'
      TargetGroupARNs:
        - Ref: WebServerTargetGroup
      VPCZoneIdentifier:
        - !Join [",",[ !Ref PrivateSubnet1, !Ref PublicSubnet2 ]]
  WebServerLoadBalancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      Subnets:
        - Ref: PublicSubnet1
        - Ref: PublicSubnet2
      SecurityGroups:
        - Ref: LoadBalancerSecurity
  LoadBalancerListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: WebServerTargetGroup
      LoadBalancerArn:
        Ref: WebServerLoadBalancer
      Port: 80
      Protocol: HTTP
  LoadBalancerListenerRule:
    Type: "AWS::ElasticLoadBalancingV2::ListenerRule"
    Properties:
      Actions: #required
        - Type: forward
          TargetGroupArn: !Ref WebServerTargetGroup
      Conditions: #required
        - Field: path-pattern
          Values: [/]
      ListenerArn: !Ref LoadBalancerListener
      Priority: 1
  WebServerTargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: !Ref VPC
Outputs:
  LoadBalancerPublic:
    Description: Public DNS of Load Balancer
    Value: !Join ["",["http://", !GetAtt WebServerLoadBalancer.DNSName]]
